name: Laravel CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: '8.1' # Updated to PHP 8.1
    - uses: actions/checkout@v3
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    - name: Generate key
      run: php artisan key:generate
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: vendor/bin/phpunit

  web-deploy:
    name: ðŸŽ‰ Deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: laravel-tests
    steps:
      - name: ðŸšš Get latest code
        uses: actions/checkout@v3
      - name: ðŸ“‚ Sync files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ftp.dirtechnology.com
          # username: laravel@laravel.dirtechnology.com
          username: ${{ secrets.ftp_username }}
          password: ${{ secrets.ftp_password }}



        #   - name: Debug Info
        #   run: |
        #     echo "GitHub Event: ${{ github.event_name }}"
        #     echo "GitHub Ref: ${{ github.ref }}"
        #     echo "GitHub SHA: ${{ github.sha }}"
        #     echo "GitHub Repository: ${{ github.repository }}"
        #     echo "GitHub Workflow: ${{ github.workflow }}"
        #     echo "GitHub Action: ${{ github.action }}"
        #     echo "GitHub Workspace: ${{ github.workspace }}"
        #     echo "GitHub Actor: ${{ github.actor }}"
        #     echo "GitHub Run ID: ${{ github.run_id }}"
        #     echo "GitHub Run Number: ${{ github.run_number }}"
        #     echo "GitHub Event Path: ${{ github.event_path }}"
        #   env:
        #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        # - name: SSH into VPS
        #   uses: appleboy/ssh-action@master
        #   with:
        #     host: ${{ secrets.SSH_HOST }}
        #     port: ${{ secrets.SSH_PORT }}
        #     username: ${{ secrets.SSH_USERNAME }}
        #     password: ${{ secrets.SSH_PASSWORD }}
        #     script: |
        #       if [ "${{ github.ref }}" = "refs/heads/master" ]; then
        #         # Deployment for master branch
        #         cd /var/www/medascore-backend
        #         git checkout master
        #         git pull origin master
        #       elif [ "${{ github.ref }}" = "refs/heads/stage" ]; then
        #         # Deployment for stage branch
        #         cd /var/www/stage.medascore.com
        #         git checkout stage
        #         git pull origin stage
        #       fi
        #       composer install --no-interaction
        #       php artisan migrate --step
        #       php artisan optimize:clear
        #       php artisan optimize
        #       php artisan view:cache
        #       sudo service nginx restart

        #       if [ "${{ github.ref }}" = "refs/heads/master" ]; then
        #         sudo supervisorctl restart medascore-server
        #         sudo supervisorctl restart medascore-api
        #         sudo supervisorctl restart medascore-queue:
        #         sudo supervisorctl restart medascore-queue-otp
        #       elif [ "${{ github.ref }}" = "refs/heads/stage" ]; then
        #         sudo supervisorctl restart medascore-stage
        #         sudo supervisorctl restart medascore-stage-api
        #         sudo supervisorctl restart medascore-stage-queue:
        #         sudo supervisorctl restart medascore-stage-queue-otp
        #       fi

        # - name: Send Telegram Notification
        #   env:
        #     TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        #     TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        #     TELEGRAM_STAGE_CHAT_ID: ${{ secrets.TELEGRAM_STAGE_CHAT_ID }}
        #   run: |
        #     if [ "${{ github.ref }}" = "refs/heads/master" ]; then
        #       env="Production"
        #       url=${{ secrets.DEPLOYMENT_URL }}
        #     elif [ "${{ github.ref }}" = "refs/heads/stage" ]; then
        #       env="Staging"
        #       url=${{ secrets.DEPLOYMENT_STAGE_URL }}
        #     fi

        #     MESSAGE="ðŸš€ Deployment Success! ðŸš€ %0A"
        #     MESSAGE+="â”œ Environment: $env %0A"
        #     MESSAGE+="â”œ Branch: ${{ github.ref }} %0A"
        #     MESSAGE+="â”œ Commit Message: ${{ github.event.head_commit.message }} %0A"
        #     MESSAGE+="â”œ Deployed by: ${{ github.actor }}%0A"
        #     MESSAGE+="â”œ Date and Time: $(date +'%Y-%m-%d %H:%M:%S') %0A"
        #     MESSAGE+="â”” Deployment URL: $url %0A"

        #     if [ "${{ github.ref }}" = "refs/heads/master" ]; then
        #       curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" -d "chat_id=$TELEGRAM_CHAT_ID" -d "text=$MESSAGE"
        #     elif [ "${{ github.ref }}" = "refs/heads/stage" ]; then
        #       curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" -d "chat_id=$TELEGRAM_STAGE_CHAT_ID" -d "text=$MESSAGE"
        #     fi
